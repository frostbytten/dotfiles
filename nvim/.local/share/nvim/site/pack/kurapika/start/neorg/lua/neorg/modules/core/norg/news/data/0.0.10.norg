| 0.0.10

* Changes to Core
 ** Keybind Changes
    There have been some breaking changes in how keybinds are being handled.
    They're now much nicer to deal with and don't require as much tinkering.

    Let's talk about what changed exactly:

  *** Defaults
   **** Default Keybinds Enabled by Default
        By loading `core.keybinds` Neorg now assumes that you want default
        keybinds to be enabled. You can disable this with:

        @code lua
        ["core.keybinds"] = {
          config = {
              default_keybinds = false,
          }
        }
        @end

        In your Neorg config.

   **** `<LocalLeader>`
        Neorg now uses `<LocalLeader>` as the default Neorg leader, allowing you to set it manually
        yourself in your config.

  *** Ways to Change Keybinds
      We've drastically improved upon how keybinds are handled internally.
      Changing just one or a few keys is much easier than before, here's how you do it.

      First, you want to add a `hook` to your keybinds config:
      
      @code lua
      ["core.keybinds"] = {
        config = {
            hook = function(keybinds)
                -- Modifications here
            end,
        }
      }
      @end
      
      This hook gives you a `keybinds` table which provides several functions to map keys.
      If {*** Defaults}[`default_keybinds`] is set to `true` then you'll most probably find yourself
      remapping existing keys or mapping extra keys on top.

      Here are all the new functions (taken from {https://github.com/nvim-neorg/neorg/wiki/User-Keybinds}[this] page).
      
      @code lua
      ["core.keybinds"] = {
        config = {
            hook = function(keybinds)
                -- Unmaps any Neorg key from the `norg` mode
                keybinds.unmap("norg", "n", "gtd")
      
                -- Binds the `gtd` key in `norg` mode to execute `:echo 'Hello'`
                keybinds.map("norg", "n", "gtd", "<cmd>echo 'Hello!'<CR>")
      
                -- Remap unbinds the current key then rebinds it to have a different action
                -- associated with it.
                -- The following is the equivalent of the `unmap` and `map` calls you saw above:
                keybinds.remap("norg", "n", "gtd", "<cmd>echo 'Hello!'<CR>")
      
                -- Sometimes you may simply want to rebind the Neorg action something is bound to
                -- versus remapping the entire keybind. This remap is essentially the same as if you
                -- did `keybinds.remap("norg", "n", "<C-Space>, "<cmd>Neorg keybind norg core.norg.qol.todo_items.todo.task_done<CR>")
                keybinds.remap_event("norg", "n", "<C-Space>", "core.norg.qol.todo_items.todo.task_done")
      
                -- Want to move one keybind into the other? `remap_key` moves the data of the
                -- first keybind to the second keybind, then unbinds the first keybind.
                keybinds.remap_key("norg", "n", "<C-Space>", "<Leader>t")
            end,
        }
      }
      @end
      
 ** Links
    By default links are now case-insensitive (but still punctuation sensitive!). Be aware of that now when writing links :)

 ** Metadata Generation
    In this version metadata generation has been *disabled* by default. Use `:Neorg inject-metadata` to inject metadata into the document
    whenever you feel like it.

    You can reenable automatic metagen through:

    @code lua
    ["core.norg.esupports.metagen"] = {
        config = {
            type = "auto",
        }
    }
    @end

    We've also removed the ability to provide a keybind in the `type` field (who thought that was a good idea anyway? oh wait it was me).
    Now `type` can only be `none` or `auto`.
